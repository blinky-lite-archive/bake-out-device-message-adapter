[
    {
        "id": "5f562f66.a301e",
        "type": "tab",
        "label": "device-message-adapter",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "753eaa03.ce2cb4",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "5ef609e6.7c6038",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Get Temperature",
        "func": "function getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\n\nvar UpperByte = msg.payload[0];\nvar LowerByte = msg.payload[1];\nif (UpperByte == LowerByte) return null;\nif (UpperByte > 127) UpperByte = UpperByte - 256;\n//if (LowerByte > 127) LowerByte = LowerByte - 256;\nvar temperature = (UpperByte * 16 + LowerByte / 16);\n\nvar device = flow.get('device');\nvar tempSamples = getAttrObject(device, 'settings', 'temp-samples').value;\nif (tempSamples < 1.0) tempSamples = 1.0;\nvar oldTemperature = context.get('temperature');\nif (oldTemperature == undefined) oldTemperature = 20.0;\ntemperature = oldTemperature + (temperature - oldTemperature) / tempSamples;\ncontext.set('temperature',temperature);\ntemperature  = Math.round(temperature * 100.0) / 100.0;\nvar tempAttr = getAttrObject(device, 'readings', 'temperature');\ntempAttr.value = temperature;\nreturn {topic:'temperature', payload:temperature};",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 780,
        "wires": [
            [
                "70f9dc7a.b15bc4"
            ]
        ]
    },
    {
        "id": "72d86190.ad104",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "36",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 640,
        "y": 440,
        "wires": []
    },
    {
        "id": "13293ecc.6d3cc1",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 440,
        "wires": [
            [
                "72d86190.ad104",
                "e17bc3ae.1cb01"
            ]
        ]
    },
    {
        "id": "b3c46ace.05a698",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 500,
        "wires": [
            [
                "72d86190.ad104",
                "e17bc3ae.1cb01"
            ]
        ]
    },
    {
        "id": "e17bc3ae.1cb01",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "11",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 640,
        "y": 500,
        "wires": []
    },
    {
        "id": "b6e24967.126458",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "40",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 340,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5d608587.8d04ac",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1000,
        "wires": [
            [
                "b6e24967.126458"
            ]
        ]
    },
    {
        "id": "89775c7.23026a",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "b6e24967.126458"
            ]
        ]
    },
    {
        "id": "773faf09.3c713",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "e1829849.870498"
            ]
        ]
    },
    {
        "id": "70f9dc7a.b15bc4",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Toggle Blue LED",
        "func": "var toggle = context.get('toggle');\nif (toggle == undefined) toggle = true;\ntoggle = !toggle;\ncontext.set('toggle',toggle);\nreturn {topic:'toggle',payload:toggle};",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 780,
        "wires": [
            [
                "84295d13.2c929"
            ]
        ]
    },
    {
        "id": "84295d13.2c929",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "15",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 840,
        "y": 780,
        "wires": []
    },
    {
        "id": "e1829849.870498",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Read MCP9600",
        "func": "var i2c=global.get(\"i2c\");\nvar i2c1 = null;\ni2c1 = i2c.openSync(3);\ni2c1.i2cWriteSync(102, 1, new Buffer([0xc0]));\nvar word = i2c1.readWordSync(102, 0);\ni2c1.closeSync();\nvar readBuffer = new Buffer([(word & 0x00ff), (word & 0xff00) >> 8]);\n\nreturn {topic:'readword',payload:readBuffer};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 780,
        "wires": [
            [
                "5ef609e6.7c6038"
            ]
        ]
    },
    {
        "id": "14d4dc24.b47e94",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "State Machine",
        "func": "var relayBounceDelayTimeMilli = 10000;\nfunction getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\nfunction checkForRelayBounce(relayOn, now)\n{\n    var relayOnSet = relayOn;\n    if (relayOn != context.get('relayLastState'))\n    {\n        if (relayOn == 0)\n        {\n            context.set('relayLastShutOffTime', now);\n        }\n        else\n        {\n            if ((now - context.get('relayLastShutOffTime')) < relayBounceDelayTimeMilli) relayOnSet = 0;\n        }\n    }\n    context.set('relayLastState', relayOnSet);\n    return relayOnSet;\n}\nvar device = flow.get('device');\nvar temperature = getAttrObject(device, 'readings', 'temperature').value;\nvar targetTemperature = temperature;\nvar dutyFactor = 0.0;\nvar state = context.get('state');\nif (state == undefined) \n{\n    state = 0;\n    context.set('state',state);\n}\nvar deviceState = getAttrObject(device, 'settings', 'state').value;\nif (deviceState != state)\n{\n    state = deviceState;\n    context.set('state',deviceState);\n    context.set('startStateTime', new Date().getTime());\n    context.set('startStateTemperature', temperature);\n    context.set('relayLastShutOffTime', 0);\n}\n\nif (context.get('relayLastShutOffTime') == undefined) context.set('relayLastShutOffTime', 0);\nif (context.get('relayLastState') == undefined) context.set('relayLastState', 0);\nif (context.get('regLEDOn') == undefined) context.set('regLEDOn', false);\n\nvar relayOn = 0;\nvar regLEDOn = context.get('regLEDOn');\nvar now = msg.payload;\nvar rampUptime = getAttrObject(device, 'settings', 'ramp-up-time').value;\nvar rampDowntime = getAttrObject(device, 'settings', 'ramp-down-time').value;\nvar regTemp = getAttrObject(device, 'settings', 'reg-temp').value;\nvar regWindow = getAttrObject(device, 'settings', 'reg-window').value;\n\nswitch(state) \n{\n  case 0:\n    // off\n    regLEDOn = false;\n    context.set('regLEDOn', regLEDOn);\n    relayOn = 0;\n    break;\n  case 1:\n    // ramp up\n    var deltaTime = (now - context.get('startStateTime')) / 3600.0 / 1000.0;\n    if (deltaTime > rampUptime) deltaTime = rampUptime;\n    targetTemperature = (regTemp - context.get('startStateTemperature')) ;\n    targetTemperature = targetTemperature * deltaTime / rampUptime;\n    targetTemperature = targetTemperature + context.get('startStateTemperature');\n    targetTemperature = Math.round(targetTemperature * 100.0) / 100.0;\n    if (temperature < (targetTemperature - regWindow))\n    {\n        relayOn = 1;\n    }\n    else\n    {\n        relayOn = 0;\n    }\n    relayOn = checkForRelayBounce(relayOn, now);\n    regLEDOn = !regLEDOn;\n    context.set('regLEDOn', regLEDOn);\n    break;\n  case 2:\n    // ramp down\n    deltaTime = (now - context.get('startStateTime')) / 3600.0 / 1000.0;\n    if (deltaTime > rampDowntime) deltaTime = rampDowntime;\n    targetTemperature = (20.0 - context.get('startStateTemperature')) ;\n    targetTemperature = targetTemperature * deltaTime / rampDowntime;\n    targetTemperature = targetTemperature + context.get('startStateTemperature');\n    targetTemperature = Math.round(targetTemperature * 100.0) / 100.0;\n    if (temperature < (targetTemperature - regWindow))\n    {\n        relayOn = 1;\n    }\n    else\n    {\n        relayOn = 0\n    }\n    relayOn = checkForRelayBounce(relayOn, now);\n    regLEDOn = !regLEDOn;\n    context.set('regLEDOn', regLEDOn);\n    break;\n  case 3:\n    // regulate\n    targetTemperature = Math.round(regTemp * 100.0) / 100.0;\n    if (temperature < (targetTemperature - regWindow))\n    {\n        relayOn = 1;\n    }\n    else\n    {\n        relayOn = 0\n    }\n    relayOn = checkForRelayBounce(relayOn, now);\n    regLEDOn = true;\n    context.set('regLEDOn', regLEDOn);\n    break;\n  case 4:\n    // on\n    regLEDOn = false;\n    context.set('regLEDOn', regLEDOn);\n    relayOn = 1;\n    break;\n  default:\n    regLEDOn = false;\n    context.set('regLEDOn', regLEDOn);\n    relayOn = 0;\n}\nvar attrDutyFactor = getAttrObject(device, 'readings', 'duty-factor');\nvar attrRampTemp = getAttrObject(device, 'readings', 'ramp-temp');\nvar attrRelay = getAttrObject(device, 'readings', 'relay');\n\nattrDutyFactor.value = dutyFactor;\nattrRampTemp.value = targetTemperature;\nattrRelay.value = relayOn;\n\nreturn [{topic:'relay',payload:relayOn}, {topic:'device',payload:device}, {topic:'regLED',payload:regLEDOn}];",
        "outputs": 3,
        "noerr": 0,
        "x": 420,
        "y": 580,
        "wires": [
            [
                "72d86190.ad104",
                "e17bc3ae.1cb01"
            ],
            [
                "c41edba7.5b4fb8"
            ],
            [
                "7994edba.fadd74"
            ]
        ]
    },
    {
        "id": "f12be87.9139b18",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "clock",
        "payload": "",
        "payloadType": "date",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "7",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "14d4dc24.b47e94"
            ]
        ]
    },
    {
        "id": "7994edba.fadd74",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "13",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 640,
        "y": 620,
        "wires": []
    },
    {
        "id": "b3b623c5.9e71e",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Settings",
        "topic": "$(MQTTSUBSCRIBETOPIC)",
        "qos": "0",
        "datatype": "auto",
        "broker": "753eaa03.ce2cb4",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "506cdb21.184984"
            ]
        ]
    },
    {
        "id": "a75224c4.0e4aa8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "createSettings",
        "func": "function getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\nfor (var ii = 0; ii < msg.payload.settings.length; ++ii)\n{\n    if (msg.payload.settings[ii].type == 'scalar')\n    {\n        msg.payload.settings[ii].alarm.value = 0;\n        if (!isNaN(msg.payload.settings[ii].value))\n        {\n            if (msg.payload.settings[ii].value < msg.payload.settings[ii].alarm.limits.low)  msg.payload.settings[ii].alarm.value = 1;\n            if (msg.payload.settings[ii].value < msg.payload.settings[ii].alarm.limits.lolo) msg.payload.settings[ii].alarm.value = 3;\n            if (msg.payload.settings[ii].value > msg.payload.settings[ii].alarm.limits.high) msg.payload.settings[ii].alarm.value = 2;\n            if (msg.payload.settings[ii].value > msg.payload.settings[ii].alarm.limits.hihi) msg.payload.settings[ii].alarm.value = 4;\n        }\n    }\n}\n\nflow.set('device', msg.payload);    \n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1000,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "506cdb21.184984",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "a75224c4.0e4aa8",
                "e507d5a4.de9ba8"
            ]
        ]
    },
    {
        "id": "e507d5a4.de9ba8",
        "type": "file",
        "z": "5f562f66.a301e",
        "name": "Write initSettings.json",
        "filename": "initSettings.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1020,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "99ed6659.727738",
        "type": "file in",
        "z": "5f562f66.a301e",
        "name": "Read initSettings.json",
        "filename": "initSettings.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "c3b86b01.59d308"
            ]
        ]
    },
    {
        "id": "dadbe94c.87edd8",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "initSettings",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "99ed6659.727738"
            ]
        ]
    },
    {
        "id": "c3b86b01.59d308",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 160,
        "wires": [
            [
                "a75224c4.0e4aa8"
            ]
        ]
    },
    {
        "id": "c41edba7.5b4fb8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Check alarms",
        "func": "for (var ii = 0; ii < msg.payload.readings.length; ++ii)\n{\n    if (msg.payload.readings[ii].type == 'scalar')\n    {\n        msg.payload.readings[ii].alarm.value = 0;\n        if (!isNaN(msg.payload.readings[ii].value))\n        {\n            if (msg.payload.readings[ii].value < msg.payload.readings[ii].alarm.limits.low)  msg.payload.readings[ii].alarm.value = 1;\n            if (msg.payload.readings[ii].value < msg.payload.readings[ii].alarm.limits.lolo) msg.payload.readings[ii].alarm.value = 3;\n            if (msg.payload.readings[ii].value > msg.payload.readings[ii].alarm.limits.high) msg.payload.readings[ii].alarm.value = 2;\n            if (msg.payload.readings[ii].value > msg.payload.readings[ii].alarm.limits.hihi) msg.payload.readings[ii].alarm.value = 4;\n        }\n    }\n}\nflow.set('device', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 580,
        "wires": [
            [
                "a59f6c82.3369d"
            ]
        ]
    },
    {
        "id": "a59f6c82.3369d",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings",
        "topic": "$(MQTTPUBLISHTOPIC)",
        "qos": "0",
        "retain": "false",
        "broker": "753eaa03.ce2cb4",
        "x": 850,
        "y": 580,
        "wires": []
    }
]